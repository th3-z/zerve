#!/usr/bin/env python3

# User with sufficient access to scp to target location
USERNAME = "the_z"
# SSH private key for the user, ideally a non-passworded one
IDENTITY = "/home/the_z/.ssh/id_rsa_syn"
# Target server's domain name
REMOTE_HOST = "files.th3-z.xyz"
# Root of a HTTP server on target host
TARGET_ROOT = "/srv/www/files-th3-z-xyz/"
# Path relative to root for temporary uploads
TARGET_LOCATION_TRANSIENT = "transient/"
# Path relative to root for permanent uploads
TARGET_LOCATION_STANDING = "standing/"

import sys
import argparse

from os import system
from os.path import isfile, exists, dirname, splitext, basename

import hashlib
import pyperclip

SCP_FLAGS = "-Cq -i {}".format(IDENTITY)
SSH_FLAGS = "-q -i {}".format(IDENTITY)

def md5sum(filename):
    hashalg = hashlib.md5()

    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hashalg.update(chunk)

    return hashalg.hexdigest()


def main():
    arg_parser = argparse.ArgumentParser()
    
    arg_parser.add_argument("input_file", \
        help="Specify a file to upload")
    arg_parser.add_argument("-p", "--preserve_name", \
        help="Preserve filename, overwrites existing files", \
        action="store_true")
    arg_parser.add_argument("-v", "--verbose", \
        help="Increase output verbosity", \
        action="store_true")
    arg_parser.add_argument("-s", "--standing", \
        help="Upload file to alternative, persistant, location", \
        action="store_true")

    args = arg_parser.parse_args()
    verbose = args.verbose
    standing = args.standing
    file_path = args.input_file
    preserve_name = args.preserve_name

    if standing:
        target_location = TARGET_LOCATION_STANDING
    else:
        target_location = TARGET_LOCATION_TRANSIENT
    target_path = TARGET_ROOT + target_location

    if not exists(file_path) or not isfile(file_path):
        print("Err: file not found!")

    file_name, file_ext = splitext(basename(file_path))

    if preserve_name:
        file_remote = file_name + file_ext
    else:
        file_remote = md5sum(file_path) + file_ext
    
    scp_command = "scp {} \"{}\" {}@{}:{}".format(
        SCP_FLAGS,
        file_path, 
        USERNAME, 
        REMOTE_HOST, 
        target_path+file_remote
    )

    link = "https://{}/{}{}".format(REMOTE_HOST, target_location, file_remote)

    if verbose:
        print(scp_command)
    
    system(scp_command)
    print(link)

    try:
        pyperclip.copy(link)
    except pyperclip.PyperclipException as e:
        # No clipboard is available :(
        pass


if __name__ == "__main__":
    main()
